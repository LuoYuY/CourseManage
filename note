1.防止外部密码注入SQL
mybatis中变量使用#{}而不是${}, 因为#{}是使用预编译指令（preparedStatement）


2.日志打印 使用Springboot自带的logpack
https://www.cnblogs.com/fishpro/p/11167469.html#_label1_2
https://www.cnblogs.com/nananana/p/8371805.html
- 日志级别： debug info error warn 默认为info
- 直接使用，不用单独引入
- 在 application.yml 或 resources/新建logback-spring.xml 中配置日志级别、日志存储路径和输出的格式


3.关于如何在 Spring Boot 中配置不同的环境实现 开发环境（dev）、测试环境（test）、生成环境（prod）分离
https://www.cnblogs.com/fishpro/p/11154872.html

默认为 application.properties 直接重命名为 application.yml
新建 application-dev.yml（开发环境）,application-test.yml（测试环境）,
application-uat.yml（预发布环境）, application-prod.yml（生产环境）


4.权限管理

1）jwt
Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准

基于session认证所显露的问题

Session: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。

扩展性: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。

基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。

流程上是这样的：

    用户使用用户名密码来请求服务器
    服务器进行验证用户的信息
    服务器通过验证发送给用户一个token
    客户端存储token，并在每次请求时附送上这个token值
    服务端验证token值，并返回数据

这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了Access-Control-Allow-Origin: *。



2）token
定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，
当第一次登录后，服务器生成一个Token便将此Token返回给客户端，
以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。



https://www.jianshu.com/p/24825a2683e6

5.redis配置
服务器上：
https://blog.csdn.net/hzlarm/article/details/99432240

项目内：
https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html

使用：

